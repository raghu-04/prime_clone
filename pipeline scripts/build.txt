pipeline {
    agent any

    tools {
        jdk 'JDK'
        nodejs 'NodeJS'
    }

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter the ECR Repo name: ')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '442042507557', description: 'Enter your AWS account id : ')
    }

    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    stages {
        stage('1. Git checkout ') {
            steps {
                git branch: 'main', url: 'https://github.com/raghu-04/prime_clone.git'
            }
        }
        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv ('sonar-server'){
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=amazon-prime \
                    -Dsonar.projectKey=amazon-prime
                    """
                }                
            }
        }
        stage('3. SonarQube Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
        stage('4. NPM INSTALL') {
            steps {
                sh "npm install"
            }
        }
        stage('5. Trivy Scan') {
            steps {
                sh "trivy fs . > trivy-scan-results.txt"
            }
        }
        stage('6. Docker image Build') {
            steps {
                sh "docker build -t ${params.ECR_REPO_NAME} ."
            }
        }
        stage('7. create an ECR Repository') {
            steps {
                withCredentials([string(credentialsId: 'accesskey', variable: 'aws_access_key'), string(credentialsId: 'secretkey', variable: 'aws_secret_key')]) {
                    sh """
                    aws configure set aws_access_key_id \$aws_access_key
                    aws configure set aws_secret_access_key \$aws_secret_key
                    aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-1 || \
                    aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-1
                    """
                }
            }
        }
        stage('8. login to ECR & tag image'){
            steps {
                withCredentials([string(credentialsId: 'accesskey', variable: 'aws_access_key'), string(credentialsId: 'secretkey', variable: 'aws_secret_key')]) {
                    sh """
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                    docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                    docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }   
            }
        }
        stage('9.Push the image to AWS ECR') {
            steps {
                withCredentials([string(credentialsId: 'accesskey', variable: 'aws_access_key'), string(credentialsId: 'secretkey', variable: 'aws_secret_key')]) {
                    sh """
                    docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                    docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }
        stage('10. Cleanup images from jenkins server') {
            steps {
                sh """
                docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:$BUILD_NUMBER
                docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                """
            }
        }
    }
}